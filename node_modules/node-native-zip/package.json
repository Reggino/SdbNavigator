{
  "name": "node-native-zip",
  "version": "1.1.0",
  "description": "A ZIP library without external dependencies",
  "author": {
    "name": "Jan Jongboom",
    "email": "janjongboom@gmail.com"
  },
  "dependencies": {},
  "devDependencies": {},
  "engine": "node >= 0.4.9",
  "scripts": {
    "start": "node server.js"
  },
  "readme": "# node-native-zip\n\nAll the current ZIP solutions for node.js are wrappers around existing zip executables, spawning on demand.\nTo all of you who rather have a native implementation of zip'ing in javascript there is node-native-zip.\nThis package works with `Buffer` objects, which allows you to do complex in-memory stuff with the least\namount of overhead.\n\nIt has been inspired by [JSZip](https://github.com/Stuk/jszip).\n\n## How to install\n\nVia NPM:\n\n    npm install node-native-zip\n    \nVia GIT:\n\n    git clone git://github.com/janjongboom/node-native-zip.git\n    \n## How to use\n\nThere are two ways to feed files into a new .zip file. Either by adding `Buffer` objects, or by adding\nan array of files.\n\n### Adding Buffer objects\n\n    var fs = require(\"fs\");\n    var zip = require(\"node-native-zip\");\n    \n    var archive = new zip();\n    \n    archive.add(\"hello.txt\", new Buffer(\"Hello world\", \"utf8\"));\n    \n    var buffer = archive.toBuffer();\n    fs.writeFile(\"./test1.zip\", buffer, function () {\n        console.log(\"Finished\");\n    });\n    \n### Adding files from the file system\n\n    var fs = require(\"fs\");\n    var zip = require(\"node-native-zip\");\n    \n    var archive = new zip();\n    \n    archive.addFiles([ \n        { name: \"moehah.txt\", path: \"./test/moehah.txt\" },\n        { name: \"images/suz.jpg\", path: \"./test/images.jpg\" }\n    ], function (err) {\n        if (err) return console.log(\"err while adding files\", err);\n        \n        var buff = archive.toBuffer();\n        \n        fs.writeFile(\"./test2.zip\", buff, function () {\n            console.log(\"Finished\");\n        });\n    });\n    \n## API Reference\n\nThere are three API methods:\n\n* `add(name, data)`, the 'name' is the name within the .zip file. To create a folder structure, add '/'\n* `addFiles(files, callback)`, where files is an array containing objects in the form ` { name: \"name/in/zip.file\", path: \"file-system.path\" } `. Callback is a function that takes 1 parameter 'err' which indicates whether an error occured.\n* `toBuffer()`, creates a new buffer and writes the zip file to it\n\n## Compression?\n\nThe library currently doesn't do any compression. It stores the files via STORE. Main reason is that the\ncompression call is synchronous at the moment, so the thread will block during compression, something to\navoid.\nHowever, it is possible to add compression methods by implementing the following interface.\n\n    module.exports = (function () {\n        return {\n            indicator : [ 0x00, 0x00 ],\n            compress : function (content) {\n                // content is a Buffer object.\n                // you have to return a new Buffer too.\n            }\n        };\n    }());\n\nThe `indicator` is an array consisting of two bytes indicating the compression technology.\nFor example: `[ 0x00, 0x00]` is STORE, `[ 0x08, 0x00]` is DEFLATE.\n\nThe `compress` function is a method that transforms an incoming `Buffer` into a new one.\n\nThe easiest to implement is probably deflate, because there is a [sample](https://github.com/Stuk/jszip/blob/master/jszip-deflate.js)\nin JSZip. You will only need to change the inner workings from string-based to Buffer-based.\n\n## Unzipping\n\nUnzipping is more complex because of all the different compression algorithms that you may\nencounter in the wild. So it's not covered. Use existing libraries for that.",
  "_id": "node-native-zip@1.1.0",
  "dist": {
    "shasum": "58e7fcb5ec9906f073ffdfa8b44428d157c19c90"
  },
  "_from": "node-native-zip"
}
